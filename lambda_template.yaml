AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack for the GetAllPlayers Step Function and Lambda functions.

Resources:
  # Lambda Functions
  GetTeamsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetTeams
      Handler: event_handler.handle_get_teams
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue CodeBucketNameExport
        S3Key: Code.zip
      Runtime: python3.12
      Timeout: 10
      MemorySize: 128

  GetPlayersFromTeamFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetPlayersFromTeam
      Handler: event_handler.handle_get_players_from_team
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue CodeBucketNameExport
        S3Key: Code.zip
      Runtime: python3.12
      Timeout: 20
      MemorySize: 128

  MakePredictionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MakePredictions
      Handler: event_handler.handle_make_predictions
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue CodeBucketNameExport
        S3Key: Code.zip
      Runtime: python3.12
      Timeout: 10
      MemorySize: 512

  GetTimsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetTims
      Handler: event_handler.handle_get_tims
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue CodeBucketNameExport
        S3Key: Code.zip
      Runtime: python3.12
      Timeout: 5
      MemorySize: 128

  PerformBackfillingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PerformBackfilling
      Handler: event_handler.handle_backfill
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue CodeBucketNameExport
        S3Key: Code.zip
      Runtime: python3.12
      Timeout: 10
      MemorySize: 128

  PublishDbFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PublishDb
      Handler: event_handler.handle_publish_db
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue CodeBucketNameExport
        S3Key: Code.zip
      Runtime: python3.12
      Timeout: 10
      MemorySize: 128

  # Lambda Log Groups
  GetTeamsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/GetTeams
      RetentionInDays: 1

  GetPlayersFromTeamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/GetPlayersFromTeam
      RetentionInDays: 1

  MakePredictionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/MakePredictions
      RetentionInDays: 1

  GetTimsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/GetTims
      RetentionInDays: 1

  PerformBackfillingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/PerformBackfilling
      RetentionInDays: 1

  PublishDbLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/PublishDb
      RetentionInDays: 1

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::get-all-players-lambda-bucket/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt StateMachine.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Api

  # State Machine
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: GetAllPlayersStateMachine
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "A state machine to handle getting players and making predictions",
          "StartAt": "Backfill",
          "States": {
            "Backfill": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PerformBackfilling",
              "Next": "GetTeams"
            },
            "GetTeams": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetTeams",
              "Next": "MapGetPlayersFromTeam"
            },
            "MapGetPlayersFromTeam": {
              "Type": "Map",
              "ItemsPath": "$.teams",
              "MaxConcurrency": 8,
              "Iterator": {
                "StartAt": "GetPlayersFromTeam",
                "States": {
                  "GetPlayersFromTeam": {
                    "Type": "Task",
                    "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetPlayersFromTeam",
                    "ResultPath": "$.players",
                    "Retry": [
                      {
                        "ErrorEquals": ["States.ALL"],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 3,
                        "BackoffRate": 2.0
                      }
                    ],
                    "End": true
                  }
                }
              },
              "Next": "GetTims"
            },
            "GetTims": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetTims",
              "Next": "MakePredictions"
            },
            "MakePredictions": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MakePredictions",
              "Next": "SaveToDb"
            },
            "SaveToDb": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Api",
              "End": true
            }
          }
        }

  # IAM Role for State Machine Execution
  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StateMachineExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetTeams
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetPlayersFromTeam
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetTims
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MakePredictions
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Api
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PerformBackfilling
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PublishDb

  DailyStepFunctionTrigger:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(0 8 * * ? *)"  # 8 AM UTC, which is 3 AM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt StateMachine.Arn
          RoleArn: !GetAtt EventBridgeInvokeRole.Arn
          Id: GetAllPlayersStateMachineTarget

  EventBridgeInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeInvokeStepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt StateMachine.Arn
