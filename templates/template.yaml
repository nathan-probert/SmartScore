AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack for the GetAllPlayers Step Function and Lambda functions.

Parameters:
  ENV:
    Type: String
    Description: The environment (e.g., dev, prod)
    Default: dev
  SupabaseUrl:
    Type: String
    Description: The URL for the Supabase API
  SupabaseApiKey:
    Type: String
    Description: The API key for Supabase

Resources:
  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Api-${ENV}"
              - Effect: Allow
                Action:
                  - events:* # Consider restricting this based on your actual requirements
                Resource: "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: "*"  # Applies to all resources
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: "*"

  # Lambda Functions
  GetTeamsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GetTeams-${ENV}"
      Handler: event_handler.handle_get_teams
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  GetPlayersFromTeamFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GetPlayersFromTeam-${ENV}"
      Handler: event_handler.handle_get_players_from_team
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  MakePredictionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "MakePredictions-${ENV}"
      Handler: event_handler.handle_make_predictions
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 512
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  GetTimsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GetTims-${ENV}"
      Handler: event_handler.handle_get_tims
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  PerformBackfillingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "PerformBackfilling-${ENV}"
      Handler: event_handler.handle_backfill
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  PublishDbFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "PublishDb-${ENV}"
      Handler: event_handler.handle_publish_db
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  CheckCompletedFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CheckCompleted-${ENV}"
      Handler: event_handler.handle_check_completed
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  ParseData:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ParseData-${ENV}"
      Handler: event_handler.handle_parse_teams
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  UpdateHistoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "UpdateHistory-${ENV}"
      Handler: event_handler.handle_save_historic_db
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
          
  # Lambda Log Groups
  GetTeamsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/GetTeams-${ENV}"
      RetentionInDays: 1

  GetPlayersFromTeamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/GetPlayersFromTeam-${ENV}"
      RetentionInDays: 1

  MakePredictionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/MakePredictions-${ENV}"
      RetentionInDays: 1

  GetTimsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/GetTims-${ENV}"
      RetentionInDays: 1

  PerformBackfillingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/PerformBackfilling-${ENV}"
      RetentionInDays: 1

  PublishDbLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/PublishDb-${ENV}"
      RetentionInDays: 1

  CheckCompletedLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CheckCompleted-${ENV}"
      RetentionInDays: 1

  ParseDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ParseData-${ENV}"
      RetentionInDays: 1

  UpdateHistoryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/UpdateHistory-${ENV}"
      RetentionInDays: 1

Outputs:
  StepFunctionExecutionRoleArn:
    Description: IAM role ARN to be used by Step Functions
    Value: !GetAtt LambdaExecutionRole.Arn
