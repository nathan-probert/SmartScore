AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack for the GetAllPlayers Step Function and Lambda functions.

Parameters:
  ENV:
    Type: String
    Description: The environment (e.g., dev, prod)
    Default: dev
  SupabaseUrl:
    Type: String
    Description: The URL for the Supabase API
  SupabaseApiKey:
    Type: String
    Description: The API key for Supabase

Resources:
  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref GetAllPlayersStateMachine # Corrected this line
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Api-${ENV}"
              - Effect: Allow
                Action:
                  - events:* # Consider restricting this based on your actual requirements
                Resource: "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: "*"  # Applies to all resources
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: "*"

  # Lambda Functions
  GetTeamsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GetTeams-${ENV}"
      Handler: event_handler.handle_get_teams
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  GetPlayersFromTeamFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GetPlayersFromTeam-${ENV}"
      Handler: event_handler.handle_get_players_from_team
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  MakePredictionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "MakePredictions-${ENV}"
      Handler: event_handler.handle_make_predictions
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 512
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  GetTimsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GetTims-${ENV}"
      Handler: event_handler.handle_get_tims
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey

  PerformBackfillingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "PerformBackfilling-${ENV}"
      Handler: event_handler.handle_backfill
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  PublishDbFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "PublishDb-${ENV}"
      Handler: event_handler.handle_publish_db
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  CheckCompletedFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CheckCompleted-${ENV}"
      Handler: event_handler.handle_check_completed
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  ParseData:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ParseData-${ENV}"
      Handler: event_handler.handle_parse_teams
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}

  UpdateHistoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "UpdateHistory-${ENV}"
      Handler: event_handler.handle_save_historic_db
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": "Lambda function placeholder"}
      Environment:
        Variables:
          ENV: !Ref ENV
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_API_KEY: !Ref SupabaseApiKey
          
  # Lambda Log Groups
  GetTeamsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/GetTeams-${ENV}"
      RetentionInDays: 1

  GetPlayersFromTeamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/GetPlayersFromTeam-${ENV}"
      RetentionInDays: 1

  MakePredictionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/MakePredictions-${ENV}"
      RetentionInDays: 1

  GetTimsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/GetTims-${ENV}"
      RetentionInDays: 1

  PerformBackfillingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/PerformBackfilling-${ENV}"
      RetentionInDays: 1

  PublishDbLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/PublishDb-${ENV}"
      RetentionInDays: 1

  CheckCompletedLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CheckCompleted-${ENV}"
      RetentionInDays: 1

  ParseDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ParseData-${ENV}"
      RetentionInDays: 1

  UpdateHistoryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/UpdateHistory-${ENV}"
      RetentionInDays: 1

  # State Machine Execution Role
  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StateMachineExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt GetTeamsFunction.Arn
                  - !GetAtt GetPlayersFromTeamFunction.Arn
                  - !GetAtt MakePredictionsFunction.Arn
                  - !GetAtt GetTimsFunction.Arn
                  - !GetAtt PerformBackfillingFunction.Arn
                  - !GetAtt PublishDbFunction.Arn
                  - !GetAtt CheckCompletedFunction.Arn
                  - !GetAtt ParseData.Arn
                  - !GetAtt UpdateHistoryFunction.Arn
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Api-${ENV}"
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*" # Changed to wildcard to break circular dependency

  # State Machines
  GetAllPlayersStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "GetAllPlayersStateMachine-${ENV}"
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      DefinitionString: !Sub
        - |
          {
              "Comment": "A state machine to handle getting players and making predictions",
              "StartAt": "GetDate",
              "States": {
                  "GetDate": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CheckCompleted-${ENV}",
                      "Next": "CheckCompletion",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "CheckCompletion": {
                      "Type": "Choice",
                      "Choices": [
                          {
                              "Variable": "$.completed",
                              "BooleanEquals": true,
                              "Next": "GetTims"
                          },
                          {
                              "Variable": "$.completed",
                              "BooleanEquals": false,
                              "Next": "Backfill"
                          }
                      ]
                  },
                  "Backfill": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PerformBackfilling-${ENV}",
                      "Next": "GetPlayersStateMachine",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "GetPlayersStateMachine": {
                      "Type": "Task",
                      "Resource": "${GetPlayersStateMachine}",
                      "ResultPath": "$.players_output",
                      "Next": "CheckIfPlayersOutputIsEmpty",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "CheckIfPlayersOutputIsEmpty": {
                      "Type": "Choice",
                      "Choices": [
                          {
                              "Variable": "$.players_output[0]",
                              "IsPresent": false,
                              "Next": "PublishToDb"
                          }
                      ],
                      "Default": "ParseData"
                  },
                  "ParseData": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ParseData-${ENV}",
                      "InputPath": "$.players_output",
                      "Next": "MakePredictions",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "MakePredictions": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MakePredictions-${ENV}",
                      "Next": "GetTims",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "GetTims": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetTims-${ENV}",
                      "Next": "CheckInitialRun",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "CheckInitialRun": {
                      "Type": "Choice",
                      "Choices": [
                          {
                              "Variable": "$.is_initial_run",
                              "BooleanEquals": true,
                              "Next": "SaveToDb"
                          },
                          {
                              "Variable": "$.is_initial_run",
                              "BooleanEquals": false,
                              "Next": "PublishToDb"
                          }
                      ]
                  },
                  "SaveToDb": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Api-${ENV}",
                      "Parameters": {
                          "players.$": "$.players",
                          "date.$": "$.date",
                          "method": "POST_BATCH"
                      },
                      "Next": "UpdateHistory",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "UpdateHistory": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:UpdateHistory-${ENV}",
                      "Next": "PublishToDb",
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  },
                  "PublishToDb": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PublishDb-${ENV}",
                      "End": true,
                      "Retry": [
                          {
                              "ErrorEquals": [ "States.ALL" ],
                              "IntervalSeconds": 300,
                              "MaxAttempts": 3,
                              "BackoffRate": 1
                          }
                      ]
                  }
              }
          }
        - GetPlayersStateMachine: !GetAtt GetPlayersStateMachine.Arn

  GetPlayersStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "GetPlayersStateMachine-${ENV}"
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "State machine to get teams and their players",
          "StartAt": "GetTeams",
          "States": {
            "GetTeams": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetTeams-${ENV}",
              "ResultPath": "$.get_teams_lambda_output",
              "Next": "ExtractActualTeamsList",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 300,
                  "MaxAttempts": 3,
                  "BackoffRate": 1.0
                }
              ]
            },
            "ExtractActualTeamsList": {
              "Type": "Pass",
              "InputPath": "$.get_teams_lambda_output.teams",
              "ResultPath": "$.teams",
              "Next": "AreTeamsAvailable"
            },
            "AreTeamsAvailable": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.teams[0]",
                  "IsPresent": false,
                  "Next": "ReturnEmptyListAsResult"
                }
              ],
              "Default": "MapToAddPlayersToTeams"
            },
            "ReturnEmptyListAsResult": {
              "Type": "Pass",
              "Result": [],
              "End": true
            },
            "MapToAddPlayersToTeams": {
              "Type": "Map",
              "ItemsPath": "$.teams",
              "MaxConcurrency": 8,
              "Iterator": {
                "StartAt": "GetPlayersForThisTeam",
                "States": {
                  "GetPlayersForThisTeam": {
                    "Type": "Task",
                    "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetPlayersFromTeam-${ENV}",
                    "InputPath": "$",
                    "ResultPath": "$.retrieved_players_list",
                    "Next": "MergeTeamAndPlayers",
                    "Retry": [
                      {
                        "ErrorEquals": ["States.ALL"],
                        "IntervalSeconds": 300,
                        "MaxAttempts": 3,
                        "BackoffRate": 1.0
                      }
                    ]
                  },
                  "MergeTeamAndPlayers": {
                    "Type": "Pass",
                    "Parameters": {
                      "team_name.$": "$.team_name",
                      "team_abbr.$": "$.team_abbr",
                      "season.$": "$.season",
                      "team_id.$": "$.team_id",
                      "opponent_id.$": "$.opponent_id",
                      "home.$": "$.home",
                      "players.$": "$.retrieved_players_list"
                    },
                    "OutputPath": "$",
                    "End": true
                  }
                }
              },
              "ResultPath": "$",
              "End": true
            }
          }
        }

  DailyStepFunctionTrigger:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(0 8 * * ? *)"  # 8 AM UTC, which is 3 AM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt GetAllPlayersStateMachine.Arn
          RoleArn: !GetAtt EventBridgeInvokeRole.Arn
          Id: GetAllPlayersStateMachineTarget

  EventBridgeInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeInvokeStepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt GetAllPlayersStateMachine.Arn

  EventBridgeRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/event_bridge_role/arn/${ENV}"
      Description: "ARN of the EventBridge Invoke Role"
      Type: String
      Value: !GetAtt EventBridgeInvokeRole.Arn