{
    "Comment": "A state machine to handle getting players and making predictions",
    "StartAt": "GetDate",
    "States": {
        "GetDate": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:CheckCompleted-${ENV}",
            "Next": "CheckCompletion",
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        },
        "CheckCompletion": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.completed",
                    "BooleanEquals": true,
                    "Next": "GetTims"
                },
                {
                    "Variable": "$.completed",
                    "BooleanEquals": false,
                    "Next": "Backfill"
                }
            ]
        },
        "Backfill": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:PerformBackfilling-${ENV}",
            "Next": "GetPlayersStateMachine",
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        },
        "GetPlayersStateMachine": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "Parameters": {
                "StateMachineArn": "arn:aws:states:${AWS_REGION}:${AWS_ACCOUNT_ID}:GetPlayers-${ENV}",
                "Input": {
                "input.$": "$"
                }
            },
            "ResultSelector": {
                "players_output.$": "$.output"
            },
            "ResultPath": "$.players_output",
            "Next": "CheckIfPlayersOutputIsEmpty",
            "Retry": [
                {
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 300,
                "MaxAttempts": 3,
                "BackoffRate": 1
                }
            ]
        },
        "CheckIfPlayersOutputIsEmpty": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.players_output[0]",
                    "IsPresent": false,
                    "Next": "PublishToDb"
                }
            ],
            "Default": "ParseData"
        },
        "ParseData": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:ParseData-${ENV}",
            "InputPath": "$.players_output",
            "Next": "MakePredictions",
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        },
        "MakePredictions": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:MakePredictions-${ENV}",
            "Next": "GetTims",
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        },
        "GetTims": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:GetTims-${ENV}",
            "Next": "CheckInitialRun",
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        },
        "CheckInitialRun": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.is_initial_run",
                    "BooleanEquals": true,
                    "Next": "SaveToDb"
                },
                {
                    "Variable": "$.is_initial_run",
                    "BooleanEquals": false,
                    "Next": "PublishToDb"
                }
            ]
        },
        "SaveToDb": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:Api-${ENV}",
            "Parameters": {
                "players.$": "$.players",
                "date.$": "$.date",
                "method": "POST_BATCH"
            },
            "Next": "UpdateHistory",
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        },
        "UpdateHistory": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:UpdateHistory-${ENV}",
            "Next": "PublishToDb",
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        },
        "PublishToDb": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:PublishDb-${ENV}",
            "End": true,
            "Retry": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 300,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ]
        }
    }
}
